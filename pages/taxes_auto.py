import streamlit as st
import requests
import json
import uuid
import random
import pandas as pd
from datetime import date, datetime
from dateutil.relativedelta import relativedelta
from utils import fetch_api_data
import time

st.set_page_config(layout="wide")
st.title("üí≥ –ü–ª–∞—Ç–µ–∂–∏ –≤ –±—é–¥–∂–µ—Ç ‚Äî –ù–∞–ª–æ–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏ (—Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)")


import json
from datetime import datetime

def save_successful_payload(payload, filename="successful_payloads.json"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π).
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫.
    –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ.
    """
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        if not isinstance(data, list):
            data = [data]
    except Exception:
        data = []
    
    record = {
        "timestamp": datetime.now().isoformat(),
        "payload": payload
    }
    data.append(record)
    
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# @st.cache_data
# def fetch_api_data(endpoint):
#     try:
#         response = requests.get(f"{base_url}{endpoint}", headers=headers, verify=False)
#         response.raise_for_status()
#         return response.json()
#     except requests.exceptions.RequestException as e:
#         st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
#         return {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if 'token' not in st.session_state:
    st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

base_url = st.text_input("–ë–∞–∑–æ–≤—ã–π URL", "https://sme-bff.kz.infra")

headers = {
    "Authorization": f"Bearer {st.session_state['token']}",
    "Content-Type": "application/json"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
accounts_data = fetch_api_data(base_url=base_url, endpoint="/api/account/accounts")
valid_accounts = [
    acc for acc in accounts_data.get("accounts", [])
    if acc.get("accountStatus") == "OPEN" and not acc.get("fullyBlocked", True)
]

if not valid_accounts:
    st.error("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.")
    st.stop()

iban_options = {
    f"{acc['iban']} ‚Äî {acc['availableBalance']} {acc['currency']}": acc["iban"]
    for acc in valid_accounts
}
selected_iban_label = st.selectbox("üíº –í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏—è", list(iban_options.keys()))
iban_debit = iban_options[selected_iban_label]

max_attempts = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ", value=5, step=1, key="max_attempts")

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
selected_operation_type = "INDIVIDUAL_ENTREPRENEUR"
ugd_list = fetch_api_data(base_url=base_url, endpoint="/api/dictionary/dictionary/ugd/all")
kbk_list = fetch_api_data(base_url=base_url, endpoint=f"/api/dictionary/dictionary/kbk/kbk-to-knp-list?taxesPaymentOperationType={selected_operation_type}")
quarters_list = None

if not kbk_list:
    st.stop()

kbk_options = {f"{i['name']} ({i['code']})": i for i in kbk_list}
ugd_options = {f"{u['name']} ({u['code']})": u for u in ugd_list}
# kbk_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KBK", list(kbk_options.keys()))
# kbk = kbk_options[kbk_selected]

def fetch_period_list(kbkCode, knpCode):
    period_data = fetch_api_data(base_url=base_url, endpoint=
        f"/api/dictionary/dictionary/payment-period?"
        f"operationType=INDIVIDUAL_ENTREPRENEUR"
        f"&kbk={kbkCode}"
        f"&knp={knpCode}"
        f"&id=0"
    )

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ periodType –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äì –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not period_data:
        return []

    if period_data.get("periodType") is None:
        return []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ "periods" ‚Äì –≤–µ—Ä–Ω–µ–º –µ–≥–æ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if "periods" in period_data:
        return [
            {
                "year": p["year"],
                "quarter": p["quarter"],     
                "yearHalf": p["yearHalf"]  
            }
            for p in period_data["periods"]
        ]
    else:
        return ["–ù–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª–æ–≤"]


st.markdown("---")
st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

# –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª—è –∏ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

col0, col0_1 = st.columns([2,1])
with col0:
    base_kbk_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KBK", list(kbk_options.keys()))
    base_kbk = kbk_options[base_kbk_selected]
with col0_1:
    fix_kbk = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å kbk", value=True)

knp_options = {f"{k['knpName']} ({k['knpCode']})": k for k in base_kbk['knpList']}

col1, col2 = st.columns([2,1])
with col1:
    base_knp_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KNP", list(knp_options.keys()))
    base_knp = knp_options[base_knp_selected]
with col2:
    fix_knp = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å knp", value=True)
    
col2, col3 = st.columns([2,1])
with col2:
    base_amount = st.number_input("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞", 100.0, 1000000.0, 1000.0)
with col3:
    fix_amount = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É", value=True)

col4, col5 = st.columns([2,1])
with col4:
    base_purpose = st.text_input("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", base_knp['knpName'])
with col5:
    fix_purpose = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", value=True)

col6, col7 = st.columns([2,1])
with col6:
    kbk_code_str = (str(base_kbk["code"]) if fix_kbk else '0')

    if kbk_code_str.startswith('1'):
        base_period_list = fetch_period_list(base_kbk["code"], base_knp["knpCode"])
        if base_period_list == []:
            base_period = st.date_input("–ü–µ—Ä–∏–æ–¥", value=date.today().replace(day=1) - relativedelta(months=1))
        else:
            period_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª", [i['quarter'] for i in base_period_list])
            base_period = period_selected
    else:
        base_period = st.date_input("–ü–µ—Ä–∏–æ–¥", value=date.today().replace(day=1) - relativedelta(months=1))

with col7:
    fix_period = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥", value=True)


if base_kbk.get("ugdLoadingRequired"):
    col8, col9 = st.columns([2, 1])
    with col8:
        ugd_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –£–ì–î", list(ugd_options.keys()))
        base_ugd = ugd_options[ugd_selected]
    with col9:
        fix_ugd = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å ugd", value=True)
else:
    fix_ugd = False
st.markdown("---")
st.header("üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π
iterations = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", value=100, step=1, key="iterations")

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_text = st.empty()
progress_bar = st.progress(0)
table_placeholder = st.empty()

if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"):
    results = []
    for i in range(iterations):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_text.text(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1} –∏–∑ {iterations}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π transactionId –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        iter_transaction_id = f"APP_INDNTRTAX_{uuid.uuid4()}"
        
        #################
        random_kbk_key = random.choice(list(kbk_options.keys()))
        kbk_dict = kbk_options[random_kbk_key]
        iter_kbk = base_kbk if fix_kbk else kbk_dict

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        knp_options = {f"{k['knpName']} ({k['knpCode']})": k for k in iter_kbk['knpList']}
        random_knp_key = random.choice(list(knp_options.keys()))
        knp_dict = knp_options[random_knp_key]
        iter_knp = base_knp if fix_knp else knp_dict

        iter_amount = base_amount if fix_amount else round(random.uniform(100.0, 10000.0), 2)
        iter_purpose = base_purpose if fix_purpose else f"{base_purpose}_{random.randint(1000, 9999)}"

        kbk_code_str = str(iter_kbk["code"])
        if kbk_code_str.startswith('1'):
            iter_period_list = fetch_period_list(iter_kbk["code"], iter_knp["knpCode"])
            if iter_period_list == []:
                iter_period = base_period.isoformat() if fix_period else (base_period + relativedelta(days=random.randint(-100, 10))).isoformat()
            else:
                random_period = random.choice(iter_period_list)
                iter_year = random_period["year"]
                iter_quarter = random_period["quarter"]
                iter_period = base_period if fix_period else iter_quarter
        else:
            iter_period = base_period.isoformat() if fix_period else (base_period + relativedelta(days=random.randint(-100, 10))).isoformat()
        
        if iter_kbk.get("ugdLoadingRequired"):
            random_choice = random.choice(list(ugd_options.keys()))
            iter_ugd = base_ugd if fix_ugd else ugd_options[random_choice]
        
        #################

        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        iter_payload = {
            "transactionId": iter_transaction_id,
            "ibanDebit": iban_debit,
            "amount": iter_amount,
            "kbk": {
                "name": iter_kbk["name"],
                "code": iter_kbk["code"],
                "employeeLoadingRequired": iter_kbk["employeeLoadingRequired"],
                "ugdLoadingRequired": iter_kbk["ugdLoadingRequired"]
            },
            "knp": iter_knp["knpCode"],
            "purpose": iter_purpose,
            "taxesPaymentOperationType": selected_operation_type
        }

        if kbk_code_str.startswith('1') and iter_period_list != []:
            iter_payload["quarter"] = iter_period
            iter_payload['year'] = iter_year
        elif kbk_code_str.startswith('1') and iter_period_list == ["–ù–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª–æ–≤"]:
            iter_payload['year'] = iter_year
        else:
            iter_payload["period"] = iter_period

        if iter_kbk.get("ugdLoadingRequired"):
            iter_payload["ugd"] = iter_ugd

        
        # –§–æ—Ä–º–∏—Ä—É–µ–º commission_payload –≤–Ω–µ —Ü–∏–∫–ª–∞ (—Ç–∞–∫ –∫–∞–∫ amount –∏ transactionId —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        commission_payload = [{
            "transactionId": iter_transaction_id,
            "transactionAmount": iter_amount,
            "currency": "KZT",
            "urgent": False,
            "futureValueDate": False
        }]

        attempt = 0
        payment_status = None
        payment_text = ""
        while attempt < max_attempts:
            iter_transaction_id = f"APP_INDNTRTAX_{uuid.uuid4()}"
            commission_payload[0]["transactionId"] = iter_transaction_id
            iter_payload["transactionId"] = iter_transaction_id
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            try:
                commission_url = f"{base_url}/api/charge-calculator/api/v1/charges/trn/multi-calculate"
                commission_resp = requests.put(commission_url, headers=headers, json=commission_payload, verify=False)
                commission_resp.raise_for_status()
                commission_status = commission_resp.status_code
                commission_text = commission_resp.text
            except Exception as e:
                commission_status = None
                commission_text = str(e)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            try:
                payment_url = f"{base_url}/api/payment/api/v5/budget/init/entrepreneur"
                payment_resp = requests.post(payment_url, headers=headers, json=iter_payload, verify=False)
                payment_resp.raise_for_status()
                payment_status = payment_resp.status_code
                payment_text = payment_resp.text
                save_successful_payload(iter_payload, filename="successful_payloads.json")
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break
            except requests.exceptions.RequestException as e:
                attempt += 1
                if attempt < max_attempts:
                    progress_text.text(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    time.sleep(0.5)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    payment_status = None
                    if hasattr(e, 'response') and e.response is not None:
                        payment_text = f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} ‚Äî Exception: {e}\nServer Response:\n{e.response.text}"
                    else:
                        payment_text = f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} ‚Äî Exception: {e}"
                    break

        results.append({
            # "TransactionID": iter_transaction_id,
            "Kbk": iter_kbk['code'],
            "Knp": iter_knp['knpCode'],
            "Amount": iter_amount,
            "Purpose": iter_purpose,
            "Period": iter_period,
            "Attempts": attempt,
            "Commission Status": commission_status,
            "Payment Status": payment_status,
            "Commission Response": commission_text,
            "Payment Response": payment_text,
            "Payload": iter_payload,
        })
        progress_bar.progress((i+1) / iterations)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        df_results = pd.DataFrame(results)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —è—á–µ–µ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        def color_status(val):
            try:
                if 200 <= int(val) < 300:
                    color = 'green'
                else:
                    color = 'red'
            except:
                color = 'orange'
            return f'color: {color}'

        styled_df = df_results.style.map(color_status, subset=['Commission Status', 'Payment Status'])
        table_placeholder.dataframe(styled_df, height=500)
        # # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        # time.sleep(0.001)
    
    progress_text.text("–ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

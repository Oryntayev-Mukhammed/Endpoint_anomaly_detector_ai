import streamlit as st
import requests
import json
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import numpy as np
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta
import uuid
import datetime

st.set_page_config(layout="wide")
st.title("üí≥ –ü–ª–∞—Ç–µ–∂–∏ –≤ –±—é–¥–∂–µ—Ç ‚Äî –ù–∞–ª–æ–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏ (—Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)")

# ------------------------
# –ß–∞—Å—Ç—å —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API (–∫–∞–∫ —É –≤–∞—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
# ------------------------

if 'token' not in st.session_state:
    st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

base_url = st.text_input("–ë–∞–∑–æ–≤—ã–π URL", "https://sme-bff.kz.infra")
headers = {
    "Authorization": f"Bearer {st.session_state['token']}",
    "Content-Type": "application/json"
}

@st.cache_data
def fetch_api_data(endpoint):
    try:
        response = requests.get(f"{base_url}{endpoint}", headers=headers, verify=False)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
        return {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
accounts_data = fetch_api_data("/api/account/accounts")
valid_accounts = [
    acc for acc in accounts_data.get("accounts", [])
    if acc.get("accountStatus") == "OPEN" and not acc.get("fullyBlocked", True)
]

if not valid_accounts:
    st.error("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.")
    st.stop()

iban_options = {
    f"{acc['iban']} ‚Äî {acc['availableBalance']} {acc['currency']}": acc["iban"]
    for acc in valid_accounts
}
selected_iban_label = st.selectbox("üíº –í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏—è", list(iban_options.keys()))
iban_debit = iban_options[selected_iban_label]

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
selected_operation_type = "INDIVIDUAL_ENTREPRENEUR"
ugd_list = fetch_api_data("/api/dictionary/dictionary/ugd/all")
kbk_list = fetch_api_data(f"/api/dictionary/dictionary/kbk/kbk-to-knp-list?taxesPaymentOperationType={selected_operation_type}")

if not kbk_list:
    st.stop()

kbk_options = {f"{i['name']} ({i['code']})": i for i in kbk_list}
kbk_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KBK", list(kbk_options.keys()))
kbk = kbk_options[kbk_selected]

knp_options = {f"{k['knpName']} ({k['knpCode']})": k for k in kbk['knpList']}
knp_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ KNP", list(knp_options.keys()))
knp = knp_options[knp_selected]

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–ª–∞—Ç–µ–∂–∞
transaction_id = f"APP_INDNTRTAX_{uuid.uuid4()}"
amount = st.number_input("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞", 100.0, 1000000.0, 1000.0)
purpose = st.text_input("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", knp['knpName'])
period = st.date_input("–ü–µ—Ä–∏–æ–¥", value=date.today().replace(day=1) - relativedelta(months=1))

# BIN, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
bin_code = None
if kbk.get("ugdLoadingRequired"):
    ugd_options = {f"{u['name']} ({u['code']})": u for u in ugd_list}
    ugd_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –£–ì–î", list(ugd_options.keys()))
    bin_code = ugd_options[ugd_selected]["bin"]

if st.button("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂"):
    commission_payload = [{
        "transactionId": transaction_id,
        "transactionAmount": amount,
        "currency": "KZT",
        "urgent": False,
        "futureValueDate": False
    }]
    try:
        commission_url = f"{base_url}/api/charge-calculator/api/v1/charges/trn/multi-calculate"
        resp = requests.put(commission_url, headers=headers, json=commission_payload, verify=False)
        resp.raise_for_status()
        st.success("‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
        st.json(resp.json())
    except Exception as e:
        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏:")
        st.text(e)
        st.stop()

    # –°–æ–±–∏—Ä–∞–µ–º payload –ø–ª–∞—Ç–µ–∂–∞
    payload = {
        "transactionId": transaction_id,
        "ibanDebit": iban_debit,
        "amount": amount,
        "kbk": {
            "name": kbk["name"],
            "code": kbk["code"],
            "employeeLoadingRequired": kbk["employeeLoadingRequired"],
            "ugdLoadingRequired": kbk["ugdLoadingRequired"]
        },
        "knp": knp["knpCode"],
        "purpose": purpose,
        "period": period.isoformat(),
        "taxesPaymentOperationType": selected_operation_type
    }
    if bin_code:
        payload["bin"] = bin_code

    st.subheader("üì¶ Payload –ø–ª–∞—Ç–µ–∂–∞")
    st.json(payload)

    try:
        response = requests.post(f"{base_url}/api/payment/api/v5/budget/init/entrepreneur", headers=headers, json=payload, verify=False)
        response.raise_for_status()
        st.success("‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        st.json(response.json())
    except requests.exceptions.RequestException as e:
        st.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:")
        if e.response is not None:
            st.text(e.response.text)
        else:
            st.text(e)
    
    # –°–æ—Ö—Ä–∞–Ω–∏–º payload –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
    st.session_state.last_payload = payload

# ------------------------
# ML-–¥–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
# ------------------------

st.header("ü§ñ –î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π (ML)")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
class Autoencoder(nn.Module):
    def __init__(self, input_dim):
        super(Autoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(input_dim, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 16)
        )
        self.decoder = nn.Sequential(
            nn.Linear(16, 32),
            nn.ReLU(),
            nn.Linear(32, 64),
            nn.ReLU(),
            nn.Linear(64, input_dim)
        )
        
    def forward(self, x):
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        return decoded

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è payload –≤ —á–∏—Å–ª–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä.
# –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –±–µ—Ä–µ–º 4 –ø—Ä–∏–∑–Ω–∞–∫–∞: amount, –ø–µ—Ä–∏–æ–¥ (timestamp), kbk.code (–∫–∞–∫ —á–∏—Å–ª–æ) –∏ –¥–ª–∏–Ω—É purpose.
def payload_to_vector(payload, input_dim=10):
    amount = payload.get("amount", 0.0)
    period_str = payload.get("period", None)
    if period_str:
        try:
            period_dt = datetime.datetime.fromisoformat(period_str)
            period_val = period_dt.timestamp()  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å–µ–∫—É–Ω–¥—ã
        except Exception:
            period_val = 0.0
    else:
        period_val = 0.0
    kbk = payload.get("kbk", {})
    kbk_code = kbk.get("code", "0")
    try:
        kbk_val = float(kbk_code)
    except:
        kbk_val = sum([ord(c) for c in kbk_code]) / 1000.0
    purpose = payload.get("purpose", "")
    purpose_len = len(purpose)
    vec = [amount, period_val, kbk_val, purpose_len]
    # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ input_dim, –¥–æ–ø–æ–ª–Ω–∏–º –Ω—É–ª—è–º–∏.
    vec += [0.0] * (input_dim - len(vec))
    return torch.tensor(vec, dtype=torch.float32)

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ) payload –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Ñ–æ—Ä–º—ã
def generate_ideal_payload():
    tid = f"APP_INDNTRTAX_{uuid.uuid4()}"
    iban = "KZ" + "".join(np.random.choice(list("0123456789"), size=18))
    amount = np.random.uniform(100.0, 1000000.0)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º kbk —Å –∫–æ–¥–æ–º –∏–∑ 6 —Ü–∏—Ñ—Ä
    code = str(np.random.randint(100000, 999999))
    kbk = {
         "name": "KBK-" + code,
         "code": code,
         "employeeLoadingRequired": np.random.choice([True, False]),
         "ugdLoadingRequired": np.random.choice([True, False])
    }
    # knp (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º)
    knp = str(np.random.randint(100, 999))
    purpose_options = [
        "–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å", 
        "–ù–î–°", 
        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥", 
        "–ê–∫—Ü–∏–∑–Ω—ã–π —Å–±–æ—Ä", 
        "–ü–ª–∞—Ç–µ–∂ –∑–∞ —É—Å–ª—É–≥–∏"
    ]
    purpose = np.random.choice(purpose_options)
    # –ü–µ—Ä–∏–æ–¥: —Å–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
    start_date = date.today() - relativedelta(years=2)
    random_days = np.random.randint(0, 365*2)
    period_date = start_date + timedelta(days=int(random_days))
    period_str = period_date.isoformat()
    taxesPaymentOperationType = "INDIVIDUAL_ENTREPRENEUR"
    payload = {
         "transactionId": tid,
         "ibanDebit": iban,
         "amount": amount,
         "kbk": kbk,
         "knp": knp,
         "purpose": purpose,
         "period": period_str,
         "taxesPaymentOperationType": taxesPaymentOperationType
    }
    if kbk["ugdLoadingRequired"]:
         payload["bin"] = str(np.random.randint(100000000, 999999999))
    return payload

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –∏–¥–µ–∞–ª—å–Ω—ã—Ö payload'–æ–≤
def generate_training_data_from_payloads(num_samples=1000, input_dim=10):
    vectors = []
    for _ in range(num_samples):
        p = generate_ideal_payload()
        vec = payload_to_vector(p, input_dim=input_dim)
        vectors.append(vec.unsqueeze(0))
    return torch.cat(vectors, dim=0)

# –§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞
def train_autoencoder(model, data, epochs=20, batch_size=32, learning_rate=0.001):
    dataset = TensorDataset(data)
    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)
    
    for epoch in range(epochs):
        running_loss = 0.0
        for batch in dataloader:
            inputs = batch[0]
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, inputs)
            loss.backward()
            optimizer.step()
            running_loss += loss.item() * inputs.size(0)
        epoch_loss = running_loss / len(dataset)
        st.write(f"Epoch {epoch+1}/{epochs}, Loss: {epoch_loss:.4f}")
    return model

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏: —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º –≤–µ–∫—Ç–æ—Ä–æ–º –∏ –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
def compute_anomaly_score(model, input_vector):
    model.eval()
    with torch.no_grad():
        reconstructed = model(input_vector)
        loss = nn.functional.mse_loss(reconstructed, input_vector, reduction='mean')
    return loss.item()

# –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
INPUT_DIM = 10

st.sidebar.header("ML –î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π")

# –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –∏–¥–µ–∞–ª—å–Ω—ã—Ö (—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö) –¥–∞–Ω–Ω—ã—Ö, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—à–µ–π —Ñ–æ—Ä–º–µ
if st.sidebar.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
    st.sidebar.write("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞...")
    training_data = generate_training_data_from_payloads(num_samples=1000, input_dim=INPUT_DIM)
    model = Autoencoder(input_dim=INPUT_DIM)
    trained_model = train_autoencoder(model, training_data, epochs=200)
    st.session_state.autoencoder_model = trained_model
    st.sidebar.success("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")

# –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π payload, –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å
if "autoencoder_model" in st.session_state:
    st.sidebar.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    if "last_payload" in st.session_state:
        vec = payload_to_vector(st.session_state.last_payload, input_dim=INPUT_DIM)
        vec = vec.unsqueeze(0)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ = 1
        anomaly_score = compute_anomaly_score(st.session_state.autoencoder_model, vec)
        st.sidebar.write(f"–ê–Ω–æ–º–∞–ª–∏—è (MSE): {anomaly_score:.4f}")
        # –ó–∞–¥–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–∏ (–ø–æ–¥–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç–Ω—ã–º –ø—É—Ç–µ–º)
        if anomaly_score > 0.5:
            st.sidebar.error("–ó–∞–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–º!")
        else:
            st.sidebar.success("–ó–∞–ø—Ä–æ—Å –≤ –Ω–æ—Ä–º–µ.")
    else:
        st.sidebar.info("Payload –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
else:
    st.sidebar.info("–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π.")
